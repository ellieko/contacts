[Preprocessing Raw Data]


It analyzes the strength of signals and finds both contact and release point of each touch.
This contact and release corresponds to a start and end point of "faily stabilized" interval of each touch.
We need this preprocessing to filter out meaningless data (i.e., hovering, noises) and deal with reliable data only.

This script is far from working perfectly, we need to change some values depending on our data type.
Current values were set based on 10833 points (1mm) and 9 lines (edge-edge).



Types of data we process are as below.


1) points (purpose: to make a good calibration table to increase our performance)
e.g.) python findContacts.py calbacalbase_tilt_se45.txt 10833
      --> It will find 10833 points or less, validate the points (finding suspicious locations of missing),
          and save each contact's information as a form of (ith point, start_index, end_index, length of this interval), into {filename}_out.txt file.

For this data type (points), you need to set "width" and "height" if they are different than default values. (Current default: 69, 157)
                             you also need to set "dist" if they are different than processing 10833 points (1mm). (Current default: 80)
                             The input value "dist" is the required minimal horizontal distance between neighbouring peaks.

For this data type (points), you can change "thrd_top" and "thrd_bottom" to decide the size of gap(error) to allow a real point and an expected point. (Current default: 20, 30)
e.g.) python findContacts.py calbase_tilt_se45.txt 10833 --thrd_top 30        --> detect missing if they are more than 30 away from its expected point
e.g.) python findContacts.py calbase_tilt_se45.txt 10833 --thrd_bottom 50     --> detect missing if they are more than 50 away from its expected point

You can also use a few more options to crop out some lines at edge. Examples are as below.
e.g.) python findContacts.py calbase_tilt_se45.txt 10833 -t 2                 --> crop out two lines from the top
e.g.) python findContacts.py calbase_tilt_se45.txt 10833 -b 1                 --> crop out one line from the bottom
e.g.) python findContacts.py calbase_tilt_se45.txt 10833 -l 1                 --> crop out one line from the left edge
e.g.) python findContacts.py calbase_tilt_se45.txt 10833 -r 1                 --> crop out one line from the right edge
e.g.) python findContacts.py calbase_tilt_se45.txt 10833 -l 1 -r 1            --> crop out a line from both left and right edge (total two lines)

+ Limits:
If you measured the data not at once (i.e., you have unusual timestamp differences), you cannot find exact locations of missing.
You can crop the output only if it has all N points.
It will just let you know the indices where it detected huge timestamp gaps and interval of indices to check to validate data yourself.



2) lines (purpose: to test performance)
You need to give an option, --notpoint or -np, meaning that its data type is not a point.
e.g.) python findContacts.py eval_tilt_w45.txt 9 --notpoint

The current values in the script only work for detecting 9 lines from edge to edge, and even its result is not accurate.
So this allows you to click all contact and release points in order by yourself, on a plotted graph if you press y/Y in the prompt.

  

Date: Feb. 24, 2023
Ellie Ko